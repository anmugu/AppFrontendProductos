//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceProductos
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceProductos.IServiceProductos")]
    public interface IServiceProductos
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceProductos/registerProduct", ReplyAction="http://tempuri.org/IServiceProductos/registerProductResponse")]
        System.Threading.Tasks.Task<bool> registerProductAsync(int idProduct, string nameProduct, int fkIdProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceProductos/findAllProduct", ReplyAction="http://tempuri.org/IServiceProductos/findAllProductResponse")]
        System.Threading.Tasks.Task<string> findAllProductAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceProductos/findAllProductJSON", ReplyAction="http://tempuri.org/IServiceProductos/findAllProductJSONResponse")]
        System.Threading.Tasks.Task<string> findAllProductJSONAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceProductos/findAllProductFilterJSON", ReplyAction="http://tempuri.org/IServiceProductos/findAllProductFilterJSONResponse")]
        System.Threading.Tasks.Task<string> findAllProductFilterJSONAsync(int fkIdCategory);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IServiceProductosChannel : ServiceProductos.IServiceProductos, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class ServiceProductosClient : System.ServiceModel.ClientBase<ServiceProductos.IServiceProductos>, ServiceProductos.IServiceProductos
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceProductosClient() : 
                base(ServiceProductosClient.GetDefaultBinding(), ServiceProductosClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IServiceProductos.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceProductosClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceProductosClient.GetBindingForEndpoint(endpointConfiguration), ServiceProductosClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceProductosClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceProductosClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceProductosClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceProductosClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceProductosClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> registerProductAsync(int idProduct, string nameProduct, int fkIdProduct)
        {
            return base.Channel.registerProductAsync(idProduct, nameProduct, fkIdProduct);
        }
        
        public System.Threading.Tasks.Task<string> findAllProductAsync()
        {
            return base.Channel.findAllProductAsync();
        }
        
        public System.Threading.Tasks.Task<string> findAllProductJSONAsync()
        {
            return base.Channel.findAllProductJSONAsync();
        }
        
        public System.Threading.Tasks.Task<string> findAllProductFilterJSONAsync(int fkIdCategory)
        {
            return base.Channel.findAllProductFilterJSONAsync(fkIdCategory);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceProductos))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceProductos))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:53821/ServiceProductos.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceProductosClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IServiceProductos);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceProductosClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IServiceProductos);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IServiceProductos,
        }
    }
}
